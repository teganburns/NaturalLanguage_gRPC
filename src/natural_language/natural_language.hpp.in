// Author: Tegan Burns
// Website: teganburns.com

#include <iostream>
#include <unistd.h>
#include <fstream>
#include <sstream>

#include <grpc++/grpc++.h>
#include "natural_language.pb.h"


// -------------------- //


using namespace google::cloud::language::v1;


// -------------------- //

std::string SCOPE = "language.googleapis.com";

// -------------------- //

int AnalyzeEntities();
int AnalyzeSentiment();
int AnalyzeSyntax();
int AnnotateText();

void read_sentences( const google::protobuf::RepeatedPtrField< Sentence >* sentences );
void read_tokens( const google::protobuf::RepeatedPtrField< Token >* tokens );
void read_entity( const google::protobuf::RepeatedPtrField< Entity >* entities );
void read_sentiment( const Sentiment* document_sentiment );
void read_language( const std::string* lang );

bool set_document( Document* doc);

AnalyzeEntitiesRequest MakeAnalyzeEntitiesRequest( Document_Type doc_type_, std::string doc_language_, std::string doc_content_ );
AnalyzeSentimentRequest MakeAnalyzeSentimentRequest( Document_Type doc_type_, std::string doc_language_, std::string doc_content_ );
AnalyzeSyntaxRequest MakeAnalyzeSyntaxRequest( Document_Type doc_type_, std::string doc_language_, std::string doc_content_ );
AnnotateTextRequest MakeAnnotateTextRequest( Document_Type doc_type_, std::string doc_language_, std::string doc_content_ );
DependencyEdge MakeDependencyEdge( );
Document MakeDocument( int type_, std::string language_, std::string content_ );
EncodingType MakeEncodingType( );
Entity MakeEntity( );
EntityMention MakeEntityMention( );
PartOfSpeech MakePartOfSpeech( );
Sentence MakeSentence( );
Sentiment MakeSentiment( );
TextSpan MakeTextSpan( std::string content_, long begin_offset_ );
Token MakeToken( std::string content_, long begin_offset_ );


