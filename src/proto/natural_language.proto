// Author: Tegan Burns
// Website: teganburns.com

// Should match January 18, 2017 revision https://cloud.google.com/natural-language/docs/reference/rpc/google.cloud.language.v1

// --- REFRENCE ---  //
//LanguageService (interface)
//AnalyzeEntitiesRequest (message)
//AnalyzeEntitiesResponse (message)
//AnalyzeSentimentRequest (message)
//AnalyzeSentimentResponse (message)
//AnalyzeSyntaxRequest (message)
//AnalyzeSyntaxResponse (message)
//AnnotateTextRequest (message)
//AnnotateTextRequest.Features (message)
//AnnotateTextResponse (message)
//DependencyEdge (message)
//DependencyEdge.Label (enum)
//Document (message)
//Document.Type (enum)
//EncodingType (enum)
//Entity (message)
//Entity.Type (enum)
//EntityMention (message)
//EntityMention.Type (enum)
//PartOfSpeech (message)
//PartOfSpeech.Aspect (enum)
//PartOfSpeech.Case (enum)
//PartOfSpeech.Form (enum)
//PartOfSpeech.Gender (enum)
//PartOfSpeech.Mood (enum)
//PartOfSpeech.Number (enum)
//PartOfSpeech.Person (enum)
//PartOfSpeech.Proper (enum)
//PartOfSpeech.Reciprocity (enum)
//PartOfSpeech.Tag (enum)
//PartOfSpeech.Tense (enum)
//PartOfSpeech.Voice (enum)
//Sentence (message)
//Sentiment (message)
//TextSpan (message)
//Token (message)


syntax="proto3";

package google.cloud.language.v1;


service LanguageService {
    
    rpc AnalyzeEntities(AnalyzeEntitiesRequest) returns (AnalyzeEntitiesResponse);

    rpc AnalyzeSentiment(AnalyzeSentimentRequest) returns (AnalyzeSentimentResponse);

    rpc AnalyzeSyntax(AnalyzeSyntaxRequest) returns (AnalyzeSyntaxResponse);

    rpc AnnotateText(AnnotateTextRequest) returns (AnnotateTextResponse);

}


message AnalyzeEntitiesRequest {

    Document document = 1;

    EncodingType  encoding_type = 2;    

}

message AnalyzeEntitiesResponse {

    repeated Entity entities = 1;

    string language = 2;

}

message AnalyzeSentimentRequest {

    Document document = 1;

    EncodingType encoding_type = 2;    

}

message AnalyzeSentimentResponse {

    Sentiment document_sentiment = 1;

    string language = 2; 

    repeated Sentence sentences = 3;

}

message AnalyzeSyntaxRequest {

    Document document = 1;

    EncodingType encoding_type = 2;    


}

message AnalyzeSyntaxResponse {

    repeated Sentence sentences = 1;

    repeated Token tokens = 2;

    string language = 4;

}

message AnnotateTextRequest {

    message Features {

        bool extract_syntax = 1;

        bool extract_entities = 2;

        bool extract_document_sentiment = 3;

    }

    Document document = 1;

    Features features = 2;

    EncodingType encoding_type = 3;

}

message AnnotateTextResponse {

    repeated Sentence sentences = 1;

    repeated Token tokens = 2;

    repeated Entity entities = 3;

    Sentiment document_sentiment = 4;

    string language = 5;

}

message DependencyEdge {

    enum Label {

        UNKNOWN = 0;
        ABBREV = 1;
        ACOMP = 2;
        ADVCL = 3;
        ADVMOD = 4;
        AMOD = 5;
        APPOS = 6;
        ATTR = 7;
        AUX = 8;
        AUXPASS = 9;
        CC = 10;
        CCOMP = 11;
        CONJ = 12;
        CSUBJ = 13;
        CSUBJPASS = 14; 
        DEP = 15;
        DET = 16;
        DISCOURSE = 17;
        DOBJ = 18;
        EXPL = 19;
        GOESWITH = 20;
        IOBJ = 21;
        MARK = 22;
        MWE = 23;
        MWV = 24;
        NEG = 25;
        NN = 26;
        NPADVMOD = 27;
        NSUBJ = 28;
        NSUBJPASS = 29;
        NUM = 30;
        NUMBER = 31;
        P = 32;
        PARATAXIS = 33;
        PARTMOD = 34;
        PCOMP = 35;
        POBJ = 36;
        POSS = 37;
        POSTNEG = 38;
        PRECOMP = 39;
        PRECONJ = 40;
        PREDET = 41;
        PREF = 42;
        PREP = 43;
        PRONL = 44;
        PRT = 45;
        PS = 46;
        QUANTMOD = 47;
        RCMOD = 48;
        RCMODREL = 49;
        RDROP = 50;
        REF = 51;
        REMNANT = 52;
        REPARANDUM = 53;
        ROOT = 54;
        SNUM = 55;
        SUFF = 56;
        TMOD = 57;
        TOPIC = 58;
        VMOD = 59;
        VOCATIVE = 60;
        XCOMP = 61;
        SUFFIX = 62;
        TITLE = 63;
        ADVPHMOD = 64;
        AUXCAUS = 65;
        AUXVV = 66;
        DTMOD = 67;
        FOREIGN = 68;
        KW = 69;
        LIST = 70;
        NOMC = 71;
        NOMCSUBJ = 72;
        NOMCSUBJPASS = 73;
        NUMC = 74;
        COP = 75;
        DISLOCATED = 76;


    }

    int32 head_token_index = 1;

    Label label = 2;

}

message Document {

    enum Type {

        TYPE_UNSPECIFIED = 0;

        PLAIN_TEXT = 1;

        HTML = 2;

    }

    Type type = 1;

    string language = 4;

    string content = 2;

    string gcs_content_uri = 3;


}

enum EncodingType {

    NONE = 0;

    UTF8 = 1;

    UTF16 = 2;

    UTF32 = 3;

}


message Entity {

    enum Type {

        UNKNOWN = 0;
        PERSON = 1;
        LOCATION = 2;
        ORGANIZATION = 3;
        EVENT = 4;
        WORK_OF_ART = 5;
        CONSUMER_GOOD = 6;
        OTHER = 7;

    }

    string name = 1;

    Type type = 2;

    map<string, string> metadata = 3;

    float salience = 4;

    repeated EntityMention mentions = 5;

}

message EntityMention {

    enum Type {

        TYPE_UNKNOWN = 0;

        PROPER = 1;

        COMMON = 2;
        
    
    }

    TextSpan text = 1;

    Type type = 2;

}

message PartOfSpeech {

    enum Aspect {

        ASPECT_UNKNOWN = 0;
        PERFECTIVE = 1;
        IMPERFECTIVE = 2;
        PROGRESSIVE = 3;

    }

    enum Case {

        CASE_UNKNOWN = 0;
        ACCUSATIVE = 1;
        ADVERBIAL = 2;
        COMPLEMENTIVE = 3;
        DATIVE = 4;
        GENITIVE = 5; 
        INSTRUMENTAL = 6;
        LOCATIVE = 7;
        NOMINATIVE = 8;
        OBLIQUE = 9;
        PARTITIVE = 10;
        PREPOSITIONAL = 11;
        REFLEXIVE_CASE = 12;
        RELATIVE_CASE = 13;
        VOCATIVE = 14;
    
    }

    enum Form {

        FORM_UNKNOWN = 0;
        ADNOMIAL = 1;
        AUXILIARY = 2;
        COMPLEMENTIZER = 3;
        FINAL_ENDING = 4;
        GERUND = 5;
        REALIS = 6;
        IRREALIS = 7;
        SHORT = 8;
        LONG = 9;
        ORDER = 10;
        SPECIFIC = 11;
    
    }

    enum Gender {

        GENDER_UNKNOWN = 0;
        FEMININE = 1;
        MASCULINE = 2;
        NEUTER = 3;

    }

    enum Mood {

        MOOD_UNKNOWN = 0;
        CONDITIONAL_MOOD = 1;
        IMPERATIVE = 2;
        INDICATIVE = 3;
        INTERROGATIVE= 4;
        JUSSIVE = 5;
        SUBJUNCTIVE = 6;
 
    }

    enum Number {

        NUMBER_UNKNOWN = 0;
        SINGULAR = 1;
        PLURAL = 2;
        DUAL = 3;

    }

    enum Person {

        PERSON_UNKNOWN = 0;
        FIRST = 1;
        SECOND = 2;
        THIRD = 3;
        REFLEXIVE_PERSON = 4;

    }

    enum Proper {

        PROPER_UNKNOWN = 0;
        PROPER = 1;
        NOT_PROPER = 2;

    }

    enum Reciprocity {

        RECIPROCITY_UNKNOWN = 0;
        RECIPROCAL = 1;
        NON_RECIPROCAL = 2;

    }

    enum Tag {

        UNKNOWN = 0;
        ADJ = 1;
        ADP = 2;
        ADV = 3;
        CONJ = 4;
        DET = 5;
        NOUN = 6;
        NUM = 7;
        PRON = 8;
        PRT = 9;
        PUNCT = 10;
        VERB = 11;
        X = 12;
        AFFIX = 13;

    }

    enum Tense {

        TENSE_UNKNOWN = 0;
        CONDITIONAL_TENSE = 1;
        FUTURE = 2;
        PAST = 3;
        PRESENT = 4;
        IMPERFECT = 5;
        PLUPERFECT = 6;
    
    }

    enum Voice {

        VOICE_UNKNOWN = 0;
        ACTIVE = 1;
        CAUSATIVE = 2;
        PASSIVE = 3;

    }

    Aspect aspect = 1;

    Case instance = 2;

    Form form = 3;

    Gender gender = 4;

    Mood mood = 5;

    Number number = 6;

    Person person = 7;

    Proper proper = 8;

    Reciprocity reciprocity = 9;

    Tag tag = 10;

    Tense tense = 11;

    Voice voice = 12;

}

message Sentence {

    TextSpan text = 1;

    Sentiment sentiment = 2;

}

message Sentiment {

    float magnitude = 1;

    float score = 2;

}

message TextSpan {

    string content = 1;

    int32 begin_offset = 2;

}

message Token {

    TextSpan text = 1;

    PartOfSpeech part_of_speech = 2;

    DependencyEdge dependency_edge = 3;

    string lemma = 4;

}


